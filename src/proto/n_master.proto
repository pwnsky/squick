// Desc: Master RPC 500 ~ 1000
syntax = "proto3";
package rpc;

enum ServerState {
    ServerCrash = 0;
    ServerNormal = 1;
    ServerBusy = 2;
    ServerFrie = 3;
}

message Server {
    int32 id = 1;
    bytes name = 2;
    bytes ip = 3;
    int32 port = 4;
    int32 max_online = 5;
    int32 cpu_count = 6;
    ServerState state = 7;
    int32 type = 8;
    int32 area = 9;
    int32 connections = 10;
    int32 workload = 11;
    bytes key = 12;
    bytes public_ip = 13;
    int32 update_time = 14;
    repeated int32 added_node_id_list = 15;
    int32 ws_port = 16;
    int32 http_port = 17;
    int32 https_port = 18;
    int32 net_client_connections = 19;
}

message NReqNodeRegister {               // msg_id=500;
    repeated int32 listen_type_list = 1; // set bind type, When new same type node connect to master, it will ntf self node.
    Server node = 2;
}

message NAckNodeRegister { // msg_id=501;
    int32 code = 1;
    repeated Server node_add_list = 2;
}

message NReqNodeUnregister { // msg_id=502;
    int32 id = 1;
}

message NAckNodeUnregister { // msg_id=503;
    int32 code = 1;
}

message NReqMinWorkloadNodeInfo { // msg_id=504;
    repeated int32 type_list = 1;
}

message NAckMinWorkloadNodeInfo { // msg_id=505;
    repeated Server list = 1;
}

message NReqNodeInfo { // msg_id=506;
    repeated int32 id_list = 1;
}

message NAckNodeInfo { // msg_id=507;
    repeated Server list = 1;
}

message NNtfNodeReport { // msg_id=508; desc=Report current node status;
    int32 id = 1;
    repeated Server list = 2;
}

message NNtfNodeAdd { // msg_id=509;
    repeated Server node_list = 1;
}

message NNtfNodeRemove { // msg_id=510;
    repeated Server node_list = 1;
}

message NNtfNodeMsgForward { // msg_id=511;
    bytes data = 1;
}

message NReqAllNodesInfo { // msg_id=512;
}

message NAckAllNodesInfo { // msg_id=513;
    repeated Server node_list = 1;
}